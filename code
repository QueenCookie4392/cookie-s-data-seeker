// ============== CONFIGURATION =================
// --- Change the names here to match your ship ---
const string TURRET_NAME = "Autocannon Turret";
const string LCD_NAME = "Grid Data";
// =============================================

IMyLargeTurretBase radarTurret;
IMyTextPanel sensorDisplay;

public Program()
{
    Runtime.UpdateFrequency = UpdateFrequency.Update10;

    // Find the blocks using the names from the configuration section
    radarTurret = GridTerminalSystem.GetBlockWithName(TURRET_NAME) as IMyLargeTurretBase;
    sensorDisplay = GridTerminalSystem.GetBlockWithName(LCD_NAME) as IMyTextPanel;

    // Error checking for setup
    if (radarTurret == null)
    {
        Echo($"Error: Turret not found.\nCheck name: '{TURRET_NAME}'");
    }
    if (sensorDisplay == null)
    {
        Echo($"Error: LCD not found.\nCheck name: '{LCD_NAME}'");
    }
    else
    {
        // Set the LCD to display text
        sensorDisplay.ContentType = ContentType.TEXT_AND_IMAGE;
    }
}

public void Main(string argument, UpdateType updateSource)
{
    // Stop running if blocks were not found during setup
    if (radarTurret == null || sensorDisplay == null)
        return;

    // Get the currently targeted entity from the turret
    var target = radarTurret.GetTargetedEntity();

    StringBuilder output = new StringBuilder();
    output.AppendLine("=== Cookie's Data Seeker ===");

    // Check if the turret has a target
    if (target.IsEmpty())
    {
        output.AppendLine("\nSearching for target...");
        Echo("Status: Searching");
    }
    else
    {
        // --- All target-related logic is now safely inside this 'else' block ---
        
        output.AppendLine("\n>>> TARGET LOCK <<<");
        output.AppendLine($"Name: {target.Name}");
        output.AppendLine($"Type: {target.Type}");
        output.AppendLine($"Distance: {Vector3D.Distance(target.Position, Me.GetPosition()):N0} m");
        output.AppendLine($"Velocity: {target.Velocity.Length():N0} m/s");

        output.AppendLine("\n=== Size Classification ===");
        
        // This is the length of the diagonal of the target's bounding box
        double signatureSize = target.BoundingBox.Size.Length();
        string sizeClass;

        if (signatureSize > 150)
            sizeClass = "Capital";
        else if (signatureSize > 75)
            sizeClass = "Large";
        else if (signatureSize > 30)
            sizeClass = "Medium";
        else
            sizeClass = "Small";
            
        output.AppendLine($"Signature: {signatureSize:N0} m");
        output.AppendLine($"Class: {sizeClass}");

        Echo("Status: Target Locked");
    }

    // Write the completed string to the LCD
    sensorDisplay.WriteText(output.ToString());
}
